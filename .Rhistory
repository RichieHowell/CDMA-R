setwd("C:\\\Richie Howell\\Documents\\R Stuffs and things")
setwd("C:\\Richie Howell\\Documents\\R Stuffs and things")
getwd()
setwd("C:\\Richie Howell\\Documents\\R Stuffs and things")
setwd("C:/Richie Howell/Documents/R Stuffs and things")
setwd("C:\\Richie Howell\\Documents\\R Stuffs and things")
3+3
?exp
a <- 3+3
b <- exp(2)
c=2*3
d=(10/4)^2
x <- Y <- 2
?:
vec1=1:10  #the colon operator
vec2=1:-10
vec4=seq(0,5,length=15)
vec3=seq(0,5,by=.5)
length(vec3)
c(1,2,3,4,5)
rep4=rep(c("a","b"),c(5,2))
rep4
setwd("C:\\Users\\Richie Howell\\Documents\\R Stuffs and things\\CDMA-R")
setwd("C:\\Users\\Richie Howell\\Documents\\R Stuffs and things\\CDMA-R")
data(mtcars)
head(mtcars)
names(mtcars)
?mtcars
setwd("C:\\Users\\Richie Howell\\Documents\\R Stuffs and things\\CDMA-R")
load('KDD2009.Rdata')
load('KDD2009.Rdata')
f
f <- paste('am ~ ',paste(vars,collapse=' + '),sep='')
temp <- paste('am ~ ',paste(vars,collapse=' + '),sep='')
temp
setwd("C:\\Users\\Richie Howell\\Documents\\R Stuffs and things\\CDMA-R")
#Inclass 11_1
#-----------------------
data(mtcars)
head(mtcars)
names(mtcars)
?mtcars
#mpg = miles per gallon
#cyl = number of cylinders
#disp = displacement in cubic inches
#hp = gross horsepower
#drat = rear axle ratio
#wt = weight
#qsec = quarter mile time
#vs = V/s
#am = transmission with 0 being auto and 1 being manual
#gear = number of forward gears
#carb = number of carburetors
vars = c("mpg", "cyl", "disp", "hp", "drat", "wt", "qsec", "vs", "gear", "carb")
temp <- paste('am ~ ',paste(vars,collapse=' + '),sep='')
temp
tmodel <- rpart(temp,data=mtcars,
control=rpart.control(cp=0.001,minsplit=1000,
minbucket=1000,maxdepth=5))
library(rpart)
tmodel <- rpart(temp,data=mtcars,
control=rpart.control(cp=0.001,minsplit=1000,
minbucket=1000,maxdepth=5))
install.packages("rpart.plot")
library(rpart.plot)
prp(tmodel)
install.packages("rpart.plot")
library(rpart.plot)
prp(tmodel)
install.packages("rpart.plot")
library(rpart.plot)
prp(tmodel)
load('KDD2009.Rdata')
dTrain$response <- dTrain$churn > 0
View(dTrain)
head(dTrain$response)
dTrain$response <- dTrain$churn > 0
head(dTrain$response)
##using the previously selected features (through var selection methods)
#shortcut to create formula
f <- paste('response ~ ',paste(selVars,collapse=' + '),sep='')
f
tmodel <- rpart(f,data=dTrain,
control=rpart.control(cp=0.001,minsplit=1000,
minbucket=1000,maxdepth=5))
tmodel
?rpart #learn more
?rpart.control #learn.more
#to visualize tree
install.packages("rpart.plot")
install.packages("rpart.plot")
prp(tmodel)
setwd("C:\\Users\\Richie Howell\\Documents\\R Stuffs and things\\CDMA-R")
data(mtcars)
head(mtcars)
names(mtcars)
vars = c("mpg", "cyl", "disp", "hp", "drat", "wt", "qsec", "vs", "gear", "carb")
temp <- paste('am ~ ',paste(vars,collapse=' + '),sep='')
tmodel <- rpart(temp,data=mtcars,
control=rpart.control(cp=0.001,minsplit=1000,
minbucket=1000,maxdepth=5))
prp(tmodel)
tmodel <- rpart(temp,data=mtcars)
prp(tmodel)
install.packages('ROCR') #only need to do this once
library(ROCR)
mtcars$pred <- predict(tmodel, newdata = mtcars)
eval <- prediction(mtcars$pred, mtcars$am)
auc_calc <- performance(eval,'auc')
auc_calc@y.values
install.packages('class')
library(class)
knnTrain = mtcars[,vars]
system.time(knnDecision <- knn(knnTrain,knnTrain,response,k=200,prob=T))
knnPred <- ifelse(knnDecision==TRUE,
attributes(knnDecision)$prob,
1-(attributes(knnDecision)$prob))
system.time(knnDecision <- knn(knnTrain,knnTrain,response,k=200,prob=T))
knnDecision <- knn(knnTrain,knnTrain,response,k=200,prob=T)
system.time(knnDecision <- knn(knnTrain,knnTrain,am,k=200,prob=T))
knnDecision <- knn(knnTrain,knnTrain,am,k=200,prob=T)
knnTrain <- dTrain[,selVars]
system.time(knnDecision <- knn(knnTrain,knnTrain,response,k=200,prob=T))
response
head(knnTrain)
head(response)
am = mtcars$am > 0
knnTrain = mtcars[,vars]
knnDecision <- knn(knnTrain,knnTrain,am,k=200,prob=T)
knnPred <- ifelse(knnDecision==TRUE,
attributes(knnDecision)$prob,
1-(attributes(knnDecision)$prob))
head(knnPred)
system.time(knnDecision <- knn(knnTrain,knnTrain,am,k=200,prob=T))
library(ROCR)
evalKnn <- prediction(knnPred, am) #from ROCR package
auc_calcKnn <- performance(evalKnn,'auc')
auc_calc@y.values
f <- paste('am ~ ',paste(vars,collapse=' + '),sep='')
system.time(gmodel <- glm(as.formula(f),
data=knnTrain,
family=binomial(link='logit')))
log_predict <- predict(gmodel,
newdata=knnTrain,
type = "response")
evalLog <- prediction(log_predict, am)
auc_calcLog <- performance(evalLog,'auc')
auc_calcLog@y.values
system.time(knnDecision <- knn(knnTrain,knnTrain,am,k=200,prob=T))
library(rpart)
f <- paste('am ~ ',paste(vars,collapse=' + '),sep='')
system.time(tmodel <- rpart(f,data=mtcars))
mtcars$pred <- predict(tmodel, newdata = mtcars)
evalTree <- prediction(mtcars$pred, mtcars$am)
auc_calcTree <- performance(evalTree,'auc')
auc_calcTree@y.values
install.packages("e1071")
library(e1071)
library(e1071)
system.time(fit <- naiveBayes(as.formula(f), data=mtcars))
system.time(naivB_pred <- predict(fit, mtcars, type = 'raw'))
evalB <- prediction(naivB_pred[,2], mtcars$am)
auc_calcB <- performance(evalB,'auc')
auc_calcB@y.values
